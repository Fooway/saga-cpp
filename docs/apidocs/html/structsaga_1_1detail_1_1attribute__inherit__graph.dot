digraph G
{
  bgcolor="transparent";
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{saga::detail::attribute\< Derived \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node2 [label="{saga::job::job\< job \>\n||+ job()\l+ job()\l+ ~job()\l+ operator=()\l+ get_job_id()\l+ run()\l+ wait()\l+ cancel()\l+ get_state()\l+ get_description()\l+ get_stdin()\l+ get_stdout()\l+ get_stderr()\l+ suspend()\l+ resume()\l+ checkpoint()\l+ migrate()\l+ signal()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1job_1_1job.html",tooltip="The job provides the manageability interface to a job instance submitted to a resource manager..."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node3 [label="{saga::cpr::job\n||}",height=0.2,width=0.4,color="grey75",tooltip="The job is a saga::job with additional checkpoint and recovery related methods."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node4 [label="{saga::cpr::self\n||}",height=0.2,width=0.4,color="grey75",tooltip="The job_self class is a job which represents the current application."];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node5 [label="{saga::job::self\n||+ self()\l+ ~self()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1job_1_1self.html",tooltip="The job_self class is a job which represents the current application."];
  Node1 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< description \>" ,fontname="FreeSans"];
  Node6 [label="{saga::detail::attribute\< description \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node7 [label="{saga::job::description\n||+ description()\l+ description()\l+ ~description()\l+ operator=()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1job_1_1description.html",tooltip="This object encapsulates all the attributes which define a job to be run."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node8 [label="{saga::cpr::description\n||}",height=0.2,width=0.4,color="grey75",tooltip="This object encapsulates all the attributes which define a job to be run."];
  Node1 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< logical_file \>" ,fontname="FreeSans"];
  Node9 [label="{saga::detail::attribute\< logical_file \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node10 [label="{saga::replica::logical_file\n||+ logical_file()\l+ logical_file()\l+ logical_file()\l+ logical_file()\l+ ~logical_file()\l+ operator=()\l+ add_location()\l+ remove_location()\l+ update_location()\l+ list_locations()\l+ replicate()\l+ create()\l+ create()\l+ create()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1replica_1_1logical__file.html",tooltip="The saga::replica class implements the saga::attributes interface."];
  Node1 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< directory \>" ,fontname="FreeSans"];
  Node11 [label="{saga::detail::attribute\< directory \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node12 [label="{saga::advert::directory\n||+ directory()\l+ directory()\l+ directory()\l+ directory()\l+ ~directory()\l+ operator=()\l+ open()\l+ open_dir()\l+ find()\l+ create()\l+ create()\l+ create()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1advert_1_1directory.html",tooltip="The directory class represents a directory within a meta data directory with a hierarchical namespace..."];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node13 [label="{saga::cpr::directory\n||}",height=0.2,width=0.4,color="grey75",tooltip="A checkpoint directory contains, you guess it, checkpoints."];
  Node1 -> Node14 [dir="back",color="orange",fontsize="10",style="solid",label=" \< service_description \>" ,fontname="FreeSans"];
  Node14 [label="{saga::detail::attribute\< service_description \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node15 [label="{saga::sd::service_description\n||+ ~service_description()\l+ operator=()\l+ get_url()\l+ get_related_services()\l+ get_data()\l# service_description()\l# set_session()\l# set_data()\l# service_description()\l# service_description()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1sd_1_1service__description.html"];
  Node1 -> Node16 [dir="back",color="orange",fontsize="10",style="solid",label=" \< job \>" ,fontname="FreeSans"];
  Node16 [label="{saga::detail::attribute\< job \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node1 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< service_data \>" ,fontname="FreeSans"];
  Node17 [label="{saga::detail::attribute\< service_data \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node18 [label="{saga::sd::service_data\n||+ service_data()\l+ service_data()\l+ ~service_data()\l+ operator=()\l# service_data()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1sd_1_1service__data.html"];
  Node1 -> Node19 [dir="back",color="orange",fontsize="10",style="solid",label=" \< entry \>" ,fontname="FreeSans"];
  Node19 [label="{saga::detail::attribute\< entry \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node19 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node20 [label="{saga::advert::entry\n||+ entry()\l+ entry()\l+ entry()\l+ entry()\l+ ~entry()\l+ store_object()\l+ store_object()\l+ retrieve_object()\l+ retrieve_object()\l+ retrieve_object()\l+ store_string()\l+ retrieve_string()\l+ create()\l+ create()\l+ create()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1advert_1_1entry.html",tooltip="The advert class represents an entry in a saga::advert::directory. An advert directory is a meta data..."];
  Node1 -> Node21 [dir="back",color="orange",fontsize="10",style="solid",label=" \< checkpoint \>" ,fontname="FreeSans"];
  Node21 [label="{saga::detail::attribute\< checkpoint \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node22 [label="{saga::cpr::checkpoint\n||}",height=0.2,width=0.4,color="grey75",tooltip="The saga::replica class implements the saga::attributes interface."];
  Node1 -> Node23 [dir="back",color="orange",fontsize="10",style="solid",label=" \< attribute \>" ,fontname="FreeSans"];
  Node23 [label="{saga::detail::attribute\< attribute \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node24 [label="{saga::attribute\n||+ attribute()\l+ attribute()\l+ attribute()\l+ ~attribute()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1attribute.html",tooltip="Brief description starts here."];
  Node1 -> Node25 [dir="back",color="orange",fontsize="10",style="solid",label=" \< metric \>" ,fontname="FreeSans"];
  Node25 [label="{saga::detail::attribute\< metric \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node26 [label="{saga::metric\n||+ metric()\l+ metric()\l+ metric()\l+ ~metric()\l+ operator=()\l+ fire()\l+ add_callback()\l+ remove_callback()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1metric.html",tooltip="Brief description starts here."];
  Node1 -> Node27 [dir="back",color="orange",fontsize="10",style="solid",label=" \< context \>" ,fontname="FreeSans"];
  Node27 [label="{saga::detail::attribute\< context \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node27 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node28 [label="{saga::context\n||+ context()\l+ context()\l+ ~context()\l+ operator=()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1context.html",tooltip="The saga::context class provides the functionality of a security information container."];
  Node1 -> Node29 [dir="back",color="orange",fontsize="10",style="solid",label=" \< entity_data \>" ,fontname="FreeSans"];
  Node29 [label="{saga::detail::attribute\< entity_data \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node30 [label="{saga::isn::entity_data\n||+ entity_data()\l+ entity_data()\l+ ~entity_data()\l+ operator=()\l# entity_data()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1isn_1_1entity__data.html"];
  Node1 -> Node31 [dir="back",color="orange",fontsize="10",style="solid",label=" \< stream \>" ,fontname="FreeSans"];
  Node31 [label="{saga::detail::attribute\< stream \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node31 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node32 [label="{saga::stream::stream\n||+ stream()\l+ stream()\l+ stream()\l+ stream()\l+ ~stream()\l+ operator=()\l+ get_url()\l+ get_context()\l+ connect()\l+ wait()\l+ close()\l+ read()\l+ write()\l+ create()\l+ create()\l+ create()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1stream_1_1stream.html",tooltip="This is the ob ject that encapsulates all client stream ob jects."];
  Node1 -> Node33 [dir="back",color="orange",fontsize="10",style="solid",label=" \< logical_directory \>" ,fontname="FreeSans"];
  Node33 [label="{saga::detail::attribute\< logical_directory \>\n||+ get_attribute()\l+ set_attribute()\l+ get_vector_attribute()\l+ set_vector_attribute()\l+ remove_attribute()\l+ list_attributes()\l+ find_attributes()\l+ attribute_exists()\l+ attribute_is_readonly()\l+ attribute_is_writable()\l+ attribute_is_vector()\l+ attribute_is_removable()\l}",height=0.2,width=0.4,color="black",URL="$structsaga_1_1detail_1_1attribute.html"];
  Node33 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node34 [label="{saga::replica::logical_directory\n||+ logical_directory()\l+ logical_directory()\l+ logical_directory()\l+ logical_directory()\l+ ~logical_directory()\l+ operator=()\l+ is_file()\l+ open()\l+ open_dir()\l+ find()\l+ create()\l+ create()\l+ create()\l}",height=0.2,width=0.4,color="black",URL="$classsaga_1_1replica_1_1logical__directory.html",tooltip="A logical directory represents a directory entry in the name space of logical files."];
}
