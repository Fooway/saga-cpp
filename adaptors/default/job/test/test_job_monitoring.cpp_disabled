
#include <unistd.h>
#include <iostream>

#include <saga/saga.hpp>

////////////////////////////////////////////////////////////////////////
int err  = 0;
int test = 0;

////////////////////////////////////////////////////////////////////////
bool my_cb_running (saga::monitorable o,
                    saga::metric      m,
                    saga::context     c)
{
  try
  {
    std::string state = m.get_attribute (saga::attributes::metric_value);
    std::cout << "state change to Running? :  " << state << std::endl;

    if ( state != "Running" )
    {
      err++;
    }

    test++; // test counter
  }
  catch ( const saga::exception & e )
  {
    std::cerr << "saga exception in my_cb_running: " << e.what () << std::endl;
    err++;
    exit (-1);
  }

  return false; // don't stay registered
}


////////////////////////////////////////////////////////////////////////
bool my_cb_done (saga::monitorable o,
                 saga::metric      m,
                 saga::context     c)
{
  try
  {
    std::string state = m.get_attribute (saga::attributes::metric_value);
    std::cout << "state change to Done? :  " << state << std::endl;

    if ( state != "Done" )
    {
      err++;
    }

    test++; // test counter
  }
  catch ( const saga::exception & e )
  {
    std::cerr << "saga exception in my_cb_done: " << e.what () << std::endl;
    err++;
    exit (-1);
  }

  return false; // don't stay registered
}


////////////////////////////////////////////////////////////////////////
int main ()
{
  // try job state metric
  try
  {
    std::string               s;
    saga::job::job            j;
    saga::job::service        js;
    saga::job::description    jd;
    std::vector <std::string> args;

    // FIXME: why can't I add a cb right here?  objecttype seems to be
    // incorrectly set to 'Task' at this point...
    // j.add_callback (saga::job::metrics::state, boost::bind (my_cb, _1, _2, _3));


    args.push_back ("3");

    jd.set_attribute (saga::job::attributes::description_executable, "/bin/sleep");
    jd.set_attribute (saga::job::attributes::description_interactive,
                      saga::attributes::common_false);

    jd.set_vector_attribute (saga::job::attributes::description_arguments, args);

    j = js.create_job (jd);

    j.add_callback (saga::job::metrics::state, boost::bind (my_cb_running, _1, _2, _3));
    saga::metric m = j.get_metric (saga::job::metrics::state);


    s = m.get_attribute (saga::attributes::metric_value);
    std::cout << "job created   : " << s <<  std::endl;
    if ( s != "New" )  { err++; }

    j.run ();

    m.add_callback (boost::bind (my_cb_done, _1, _2, _3));

    s = m.get_attribute (saga::attributes::metric_value);
    std::cout << "job started   : " << s <<  std::endl;
    if ( s != "Running" )  { err++; }


    j.wait ();

    s = m.get_attribute (saga::attributes::metric_value);
    std::cout << "job waited    : " << s <<  std::endl;
    if ( s != "Done" )  { err++; }

    int count = 0;
    while ( count < 10 && 
            test  <  2 )
    {
      count++;
      ::sleep (1);
    }

    if ( count == 10 )
    {
      std::cerr << "missing callback invocations ( found " << test << "/2)" << std::endl;
      err++;
    }
  }
  catch ( const saga::exception & e )
  {
    std::cerr << "saga exception: " << e.what () << std::endl;
  }

  return err;
}

