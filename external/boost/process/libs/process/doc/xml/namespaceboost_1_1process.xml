<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="namespaceboost_1_1process" kind="namespace">
    <compoundname>boost::process</compoundname>
    <innerclass refid="classboost_1_1process_1_1basic__pipeline" prot="public">boost::process::basic_pipeline</innerclass>
    <innerclass refid="classboost_1_1process_1_1posix__child" prot="public">boost::process::posix_child</innerclass>
    <innerclass refid="classboost_1_1process_1_1postream" prot="public">boost::process::postream</innerclass>
    <innerclass refid="classboost_1_1process_1_1launcher" prot="public">boost::process::launcher</innerclass>
    <innerclass refid="classboost_1_1process_1_1posix__status" prot="public">boost::process::posix_status</innerclass>
    <innerclass refid="classboost_1_1process_1_1win32__child" prot="public">boost::process::win32_child</innerclass>
    <innerclass refid="classboost_1_1process_1_1posix__launcher" prot="public">boost::process::posix_launcher</innerclass>
    <innerclass refid="classboost_1_1process_1_1win32__launcher" prot="public">boost::process::win32_launcher</innerclass>
    <innerclass refid="classboost_1_1process_1_1system__error" prot="public">boost::process::system_error</innerclass>
    <innerclass refid="classboost_1_1process_1_1not__found__error" prot="public">boost::process::not_found_error</innerclass>
    <innerclass refid="classboost_1_1process_1_1status" prot="public">boost::process::status</innerclass>
    <innerclass refid="classboost_1_1process_1_1pistream" prot="public">boost::process::pistream</innerclass>
    <innerclass refid="classboost_1_1process_1_1child" prot="public">boost::process::child</innerclass>
    <innerclass refid="classboost_1_1process_1_1command__line" prot="public">boost::process::command_line</innerclass>
    <innerclass refid="classboost_1_1process_1_1children" prot="public">boost::process::children</innerclass>
    <innernamespace refid="namespaceboost_1_1process_1_1detail">boost::process::detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceboost_1_1process_1505e53ae6c9577aa0ad7027fae6ee2de" prot="public" static="no">
        <type><ref refid="classboost_1_1process_1_1basic__pipeline" kindref="compound">basic_pipeline</ref>&lt; <ref refid="classboost_1_1process_1_1command__line" kindref="compound">command_line</ref> &gt;</type>
        <definition>typedef basic_pipeline&lt; command_line &gt; boost::process::pipeline</definition>
        <argsstring></argsstring>
        <name>pipeline</name>
        <briefdescription>
<para>Generic instantiation of the <ref refid="classboost_1_1process_1_1basic__pipeline" kindref="compound">basic_pipeline</ref> template. </para>        </briefdescription>
        <detaileddescription>
<para>Generic instantiation of the <ref refid="classboost_1_1process_1_1basic__pipeline" kindref="compound">basic_pipeline</ref> template. This relies on the <ref refid="classboost_1_1process_1_1command__line" kindref="compound">command_line</ref> implementation of the Command_Line concept provided by the library. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/pipeline.hpp" line="37" bodyfile="/tmp/process.016638aa/process/boost/process/pipeline.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceboost_1_1process_196ecbb2d19eb08dc6f89d652901ecb3d" prot="public" static="no">
        <name>stream_behavior</name>
        <enumvalue id="namespaceboost_1_1process_196ecbb2d19eb08dc6f89d652901ecb3d17fc673a4c7e4959cf2d0bb99245fc8f" prot="public">
          <name>close_stream</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The stream is closed and hence the child process will not be allowed to access it. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1process_196ecbb2d19eb08dc6f89d652901ecb3d525a2e4b8e2fc3251bdf7d4fbda229d7" prot="public">
          <name>inherit_stream</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The child inherits the parent&apos;s handle for the data flow, thus effectively sharing it between the two processes. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1process_196ecbb2d19eb08dc6f89d652901ecb3db3c13925591be5d0262cb8eb37e15519" prot="public">
          <name>redirect_stream</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The child is connected to the parent so that they can send and receive data through the stream. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1process_196ecbb2d19eb08dc6f89d652901ecb3d1486f0d6c65a322918bc93161bb0cbd0" prot="public">
          <name>silent_stream</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The child&apos;s stream is redirected to a null device so that its output is lost. It is important to see that this is different to close_stream because the child is still able to write data. If we closed, e.g. stdout, it&apos;s most likely that the child couldn&apos;t work at all! </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Describes the possible states for a communication stream. </para>        </briefdescription>
        <detaileddescription>
<para>Describes the possible states for a child&apos;s communication stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/stream_behavior.hpp" line="32" bodyfile="/tmp/process.016638aa/process/boost/process/stream_behavior.hpp" bodystart="32" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceboost_1_1process_163de582de0fc98af4eb45f2a9c0d1ebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1status" kindref="compound">status</ref></type>
        <definition>status boost::process::create_status</definition>
        <argsstring>(int flags)</argsstring>
        <name>create_status</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Creates a new status object. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a new status object; see the class&apos; constructor for more details on the required parameters.</para><para>This free function is provided to allow the user to construct new status objects when implementing new Child classes while still keeping the class&apos; constructor private to avoid the accidental creation of these objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/status.hpp" line="104" bodyfile="/tmp/process.016638aa/process/boost/process/status.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/process.016638aa/process/boost/process/basic_pipeline.hpp" line="40"/>
  </compounddef>
</doxygen>
