<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="classboost_1_1process_1_1command__line" kind="class" prot="public">
    <compoundname>boost::process::command_line</compoundname>
    <includes refid="command__line_8hpp" local="no">command_line.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classboost_1_1process_1_1command__line_1e276013e23b7cabdaba4fb65339fcf0b" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>typedef std::vector&lt; std::string &gt; boost::process::command_line::arguments_vector</definition>
        <argsstring></argsstring>
        <name>arguments_vector</name>
        <briefdescription>
<para>Type used to represent the argument&apos;s vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="65" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboost_1_1process_1_1command__line_195528095d591a1499e0af3a07df613f3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::process::command_line::command_line</definition>
        <argsstring>(const std::string &amp;executable, const std::string &amp;firstarg=&quot;&quot;, const std::string &amp;path=&quot;&quot;)</argsstring>
        <name>command_line</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>executable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>firstarg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Constructs a new command line. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a new command line given an executable and its program name. If the executable name does not have any directory component, it is automatically searched in the path given by <emphasis>path</emphasis> or, if empty, in the directories listed by the PATH environment variable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>executable</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path to the executable program. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstarg</parametername>
</parameternamelist>
<parameterdescription>
<para>The program&apos;s name. If empty, the constructor sets it to be the executable&apos;s base name (i.e., skips the directory). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of directories where to look for the executable, if it does not include any path component. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>not_found_error&amp;lt;std::string&amp;gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>If the executable cannot be found in the path. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="100" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="151" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1command__line_19377181d21e090bd7f3913dccc2c95b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1process_1_1command__line" kindref="compound">command_line</ref> &amp;</type>
        <definition>command_line &amp; boost::process::command_line::argument</definition>
        <argsstring>(const T &amp;argument)</argsstring>
        <name>argument</name>
        <param>
          <type>const T &amp;</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
<para>Appends a new argument to the command line. </para>        </briefdescription>
        <detaileddescription>
<para>This templated method appends a new argument to the command line. The argument&apos;s type has to be allowed on the RHS of a &lt;&lt; operator.</para><para>In a POSIX system, arguments given using this function are passed to the binary as exactly one argument. They are not subject to quoting problems. In a Win32 system, this is unavoidable given that the process&apos; command line is provided in a single string where quoting issues may arise.</para><para><simplesect kind="return"><para>A reference to the modified command line to allow daisy-chaining calls to <ref refid="classboost_1_1process_1_1command__line_19377181d21e090bd7f3913dccc2c95b2" kindref="member">argument()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="131" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="211" bodyend="217"/>
        <referencedby refid="classboost_1_1process_1_1command__line_11395f0e0fb25c732ad8eee595029d8bb" compoundref="command__line_8hpp" startline="187" endline="204">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1command__line_1c5992bd7376ff7ed35b0f892342e9560" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classboost_1_1process_1_1command__line_1e276013e23b7cabdaba4fb65339fcf0b" kindref="member">arguments_vector</ref> &amp;</type>
        <definition>const command_line::arguments_vector &amp; boost::process::command_line::get_arguments</definition>
        <argsstring>(void) const </argsstring>
        <name>get_arguments</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the arguments list. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the arguments list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="138" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1command__line_10a4b60959233722f65b75ee63f06959e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; boost::process::command_line::get_executable</definition>
        <argsstring>(void) const </argsstring>
        <name>get_executable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the executable&apos;s path. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the executable&apos;s path. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="145" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="233" bodyend="237"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classboost_1_1process_1_1command__line_11395f0e0fb25c732ad8eee595029d8bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1command__line" kindref="compound">command_line</ref></type>
        <definition>command_line boost::process::command_line::shell</definition>
        <argsstring>(const std::string &amp;command)</argsstring>
        <name>shell</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Constructs a shell-based command line. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a command line that is fed to the system&apos;s shell for further processing. This command line is subject to pattern expansion, redirection and pipelining.</para><para>In a POSIX system, the command line is fed to /bin/sh; under a Win32 system, it is fed to cmd.exe. This makes it difficult to write really portable command lines using this pseudo-constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="113" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="187" bodyend="204"/>
        <references refid="classboost_1_1process_1_1command__line_19377181d21e090bd7f3913dccc2c95b2" compoundref="command__line_8hpp" startline="211" endline="217">argument</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboost_1_1process_1_1command__line_1d73cb2ae76ecd4343444cac34f1c703d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string boost::process::command_line::m_executable</definition>
        <argsstring></argsstring>
        <name>m_executable</name>
        <briefdescription>
<para>Path to the executable program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="71" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1process_1_1command__line_1e589a90125983f2c74866fe1efb176b9" prot="private" static="no" mutable="no">
        <type><ref refid="classboost_1_1process_1_1command__line_1e276013e23b7cabdaba4fb65339fcf0b" kindref="member">arguments_vector</ref></type>
        <definition>arguments_vector boost::process::command_line::m_arguments</definition>
        <argsstring></argsstring>
        <name>m_arguments</name>
        <briefdescription>
<para>List of arguments passed to the executable program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="76" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of the Command_Line concept. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classboost_1_1process_1_1command__line" kindref="compound">command_line</ref> object represents the command line used to launch a process. It includes the path to the executable file as well as all the arguments passed to it. This class also includes some convenience functions to ease the launcher&apos;s task.</para><para>It is important to note that the list of arguments passed to the binary must always include at least an element that indicates the program&apos;s name. Its value generally matches the binary&apos;s base name, but can be changed by the user. The class enforces this requirement. </para>    </detaileddescription>
    <location file="/tmp/process.016638aa/process/boost/process/command_line.hpp" line="60" bodyfile="/tmp/process.016638aa/process/boost/process/command_line.hpp" bodystart="59" bodyend="146"/>
    <listofallmembers>
      <member refid="classboost_1_1process_1_1command__line_19377181d21e090bd7f3913dccc2c95b2" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>argument</name></member>
      <member refid="classboost_1_1process_1_1command__line_1e276013e23b7cabdaba4fb65339fcf0b" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>arguments_vector</name></member>
      <member refid="classboost_1_1process_1_1command__line_195528095d591a1499e0af3a07df613f3" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>command_line</name></member>
      <member refid="classboost_1_1process_1_1command__line_1c5992bd7376ff7ed35b0f892342e9560" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>get_arguments</name></member>
      <member refid="classboost_1_1process_1_1command__line_10a4b60959233722f65b75ee63f06959e" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>get_executable</name></member>
      <member refid="classboost_1_1process_1_1command__line_1e589a90125983f2c74866fe1efb176b9" prot="private" virt="non-virtual"><scope>boost::process::command_line</scope><name>m_arguments</name></member>
      <member refid="classboost_1_1process_1_1command__line_1d73cb2ae76ecd4343444cac34f1c703d" prot="private" virt="non-virtual"><scope>boost::process::command_line</scope><name>m_executable</name></member>
      <member refid="classboost_1_1process_1_1command__line_11395f0e0fb25c732ad8eee595029d8bb" prot="public" virt="non-virtual"><scope>boost::process::command_line</scope><name>shell</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
