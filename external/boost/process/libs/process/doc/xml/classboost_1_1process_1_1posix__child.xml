<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="classboost_1_1process_1_1posix__child" kind="class" prot="public">
    <compoundname>boost::process::posix_child</compoundname>
    <basecompoundref refid="classboost_1_1process_1_1child" prot="public" virt="non-virtual">boost::process::child</basecompoundref>
    <includes refid="posix__child_8hpp" local="no">posix_child.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboost_1_1process_1_1posix__child_1b1345d2e5fee4777707c959c324a184f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1postream" kindref="compound">postream</ref> &amp;</type>
        <definition>postream &amp; boost::process::posix_child::get_input</definition>
        <argsstring>(int desc) const </argsstring>
        <name>get_input</name>
        <param>
          <type>int</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Gets a reference to the child&apos;s input stream <emphasis>desc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to a postream object that represents one of the multiple input communication channels with the child process. The channel is identified by <emphasis>desc</emphasis> as seen from the child&apos;s point of view. The parent can use the returned stream to send data to the child.</para><para>Giving this function the STDIN_FILENO constant (defined in cstdlib) is a synonym for the <ref refid="classboost_1_1process_1_1child_198668ffd20b860848b2dba06bf7238a0" kindref="member">get_stdin()</ref> call inherited from child. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="83" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="185" bodyend="195"/>
        <references refid="classboost_1_1process_1_1child_198668ffd20b860848b2dba06bf7238a0" compoundref="child_8hpp" startline="218" endline="223">boost::process::child::get_stdin</references>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__child_11e5b99598124ebe4ee3c338d38120a94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1pistream" kindref="compound">pistream</ref> &amp;</type>
        <definition>pistream &amp; boost::process::posix_child::get_output</definition>
        <argsstring>(int desc) const </argsstring>
        <name>get_output</name>
        <param>
          <type>int</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Gets a reference to the child&apos;s output stream <emphasis>desc</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to a pistream object that represents one of the multiple output communication channels with the child process. The channel is identified by <emphasis>desc</emphasis> as seen from the child&apos;s point of view. The parent can use the returned stream to retrieve data from the child.</para><para>Giving this function the STDOUT_FILENO or STDERR_FILENO constants (both defined in cstdlib) are synonyms for the <ref refid="classboost_1_1process_1_1child_119f67d7222fbd06d0b5bed36a8bbf615" kindref="member">get_stdout()</ref> and <ref refid="classboost_1_1process_1_1child_1e21a8cc758c37037723aab198a0cbe65" kindref="member">get_stderr()</ref> calls inherited from child, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="98" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="201" bodyend="213"/>
        <references refid="classboost_1_1process_1_1child_1e21a8cc758c37037723aab198a0cbe65" compoundref="child_8hpp" startline="240" endline="245">boost::process::child::get_stderr</references>
        <references refid="classboost_1_1process_1_1child_119f67d7222fbd06d0b5bed36a8bbf615" compoundref="child_8hpp" startline="229" endline="234">boost::process::child::get_stdout</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classboost_1_1process_1_1posix__child_10be743fa6dda2b4f80a6563016ef4a9e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::process::posix_child::posix_child</definition>
        <argsstring>(handle_type h, detail::info_map &amp;infoin, detail::info_map &amp;infoout)</argsstring>
        <name>posix_child</name>
        <param>
          <type><ref refid="classboost_1_1process_1_1child_123c957bf6f18f185a9fd560efa9cb4b9" kindref="member">handle_type</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>detail::info_map &amp;</type>
          <declname>infoin</declname>
        </param>
        <param>
          <type>detail::info_map &amp;</type>
          <declname>infoout</declname>
        </param>
        <briefdescription>
<para>Constructs a new POSIX child object representing a just spawned child process. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a new child object that represents the just spawned process <emphasis>h</emphasis>.</para><para>The <emphasis>infoin</emphasis> and <emphasis>infoout</emphasis> maps contain the pipes used to handle the redirections of the child process; at the moment, no other stream_info types are supported. If the launcher was asked to redirect any of the three standard flows, their pipes must be present in these maps.</para><para>This constructor is protected because the library user has no business in creating representations of live processes himself; the library takes care of that in all cases. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="143" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="150" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classboost_1_1process_1_1posix__child_1bbb503e1d756455d777a7afa06a6d54d" prot="private" static="no">
        <type>std::map&lt; int, boost::shared_ptr&lt; <ref refid="classboost_1_1process_1_1postream" kindref="compound">postream</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt; int, boost::shared_ptr&lt; postream &gt; &gt; boost::process::posix_child::input_map</definition>
        <argsstring></argsstring>
        <name>input_map</name>
        <briefdescription>
<para>Maps child&apos;s file descriptors to postream objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="104" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classboost_1_1process_1_1posix__child_189f0aa92c4c356b2c81dfa41160d9575" prot="private" static="no">
        <type>std::map&lt; int, boost::shared_ptr&lt; <ref refid="classboost_1_1process_1_1pistream" kindref="compound">pistream</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt; int, boost::shared_ptr&lt; pistream &gt; &gt; boost::process::posix_child::output_map</definition>
        <argsstring></argsstring>
        <name>output_map</name>
        <briefdescription>
<para>Maps child&apos;s file descriptors to pistream objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="109" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__child_1385a38e929367d63bc93dcff509cad48" prot="private" static="no" mutable="no">
        <type>input_map</type>
        <definition>input_map boost::process::posix_child::m_input_map</definition>
        <argsstring></argsstring>
        <name>m_input_map</name>
        <briefdescription>
<para>Contains all relationships between child&apos;s input file descriptors and their corresponding postream objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="115" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__child_1ea983b6e5498b08ea68c419835c0ed34" prot="private" static="no" mutable="no">
        <type>output_map</type>
        <definition>output_map boost::process::posix_child::m_output_map</definition>
        <argsstring></argsstring>
        <name>m_output_map</name>
        <briefdescription>
<para>Contains all relationships between child&apos;s output file descriptors and their corresponding pistream objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="121" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classboost_1_1process_1_1posix__child_1af0c8a49488c2645b5dbabee439d5fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct detail::factories</definition>
        <argsstring></argsstring>
        <name>detail::factories</name>
        <reimplements refid="classboost_1_1process_1_1child_1af0c8a49488c2645b5dbabee439d5fac">detail::factories</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="144" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>POSIX implementation of the Child concept. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classboost_1_1process_1_1posix__child" kindref="compound">posix_child</ref> class implements the Child concept in a POSIX operating system.</para><para>A POSIX child differs from a regular child (represented by a child object) in that it supports more than three communication channels with its parent. These channels are identified by regular file descriptors (integers).</para><para>This class is built on top of the generic child so as to allow its trivial adoption. When a program is changed to use the POSIX-specific launcher (<ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref>), it will most certainly need to migrate its use of the child class to <ref refid="classboost_1_1process_1_1posix__child" kindref="compound">posix_child</ref>. Doing so is only a matter of redefining the appropriate object and later using the required extra features: there should be no need to modify the existing code (e.g. method calls) in any other way. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="22">
        <label>boost::process::child</label>
        <link refid="classboost_1_1process_1_1child"/>
      </node>
      <node id="21">
        <label>boost::process::posix_child</label>
        <link refid="classboost_1_1process_1_1posix__child"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="24">
        <label>boost::process::child</label>
        <link refid="classboost_1_1process_1_1child"/>
      </node>
      <node id="23">
        <label>boost::process::posix_child</label>
        <link refid="classboost_1_1process_1_1posix__child"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/tmp/process.016638aa/process/boost/process/posix_child.hpp" line="68" bodyfile="/tmp/process.016638aa/process/boost/process/posix_child.hpp" bodystart="66" bodyend="145"/>
    <listofallmembers>
      <member refid="classboost_1_1process_1_1child_1a899830c825cc53ecc422f2915959fc7" prot="protected" virt="non-virtual"><scope>boost::process::posix_child</scope><name>child</name></member>
      <member refid="classboost_1_1process_1_1posix__child_1af0c8a49488c2645b5dbabee439d5fac" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>detail::factories</name></member>
      <member refid="classboost_1_1process_1_1child_1f5aa0a4c094e51d4d2736472acec6893" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_handle</name></member>
      <member refid="classboost_1_1process_1_1posix__child_1b1345d2e5fee4777707c959c324a184f" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_input</name></member>
      <member refid="classboost_1_1process_1_1posix__child_11e5b99598124ebe4ee3c338d38120a94" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_output</name></member>
      <member refid="classboost_1_1process_1_1child_1e21a8cc758c37037723aab198a0cbe65" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_stderr</name></member>
      <member refid="classboost_1_1process_1_1child_198668ffd20b860848b2dba06bf7238a0" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_stdin</name></member>
      <member refid="classboost_1_1process_1_1child_119f67d7222fbd06d0b5bed36a8bbf615" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>get_stdout</name></member>
      <member refid="classboost_1_1process_1_1child_123c957bf6f18f185a9fd560efa9cb4b9" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>handle_type</name></member>
      <member refid="classboost_1_1process_1_1posix__child_1bbb503e1d756455d777a7afa06a6d54d" prot="private" virt="non-virtual"><scope>boost::process::posix_child</scope><name>input_map</name></member>
      <member refid="classboost_1_1process_1_1posix__child_1385a38e929367d63bc93dcff509cad48" prot="private" virt="non-virtual"><scope>boost::process::posix_child</scope><name>m_input_map</name></member>
      <member refid="classboost_1_1process_1_1posix__child_1ea983b6e5498b08ea68c419835c0ed34" prot="private" virt="non-virtual"><scope>boost::process::posix_child</scope><name>m_output_map</name></member>
      <member refid="classboost_1_1process_1_1posix__child_189f0aa92c4c356b2c81dfa41160d9575" prot="private" virt="non-virtual"><scope>boost::process::posix_child</scope><name>output_map</name></member>
      <member refid="classboost_1_1process_1_1posix__child_10be743fa6dda2b4f80a6563016ef4a9e" prot="protected" virt="non-virtual"><scope>boost::process::posix_child</scope><name>posix_child</name></member>
      <member refid="classboost_1_1process_1_1child_1c792e2fe261eb08b1a43e6fa7da408a4" prot="public" virt="non-virtual"><scope>boost::process::posix_child</scope><name>wait</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
