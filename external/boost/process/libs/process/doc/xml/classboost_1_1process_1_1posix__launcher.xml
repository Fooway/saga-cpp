<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="classboost_1_1process_1_1posix__launcher" kind="class" prot="public">
    <compoundname>boost::process::posix_launcher</compoundname>
    <basecompoundref refid="classboost_1_1process_1_1launcher" prot="public" virt="non-virtual">boost::process::launcher</basecompoundref>
    <includes refid="posix__launcher_8hpp" local="no">posix_launcher.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1ab7af573ae8fe5bef490ab061e6cc4aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_input_behavior</definition>
        <argsstring>(int desc, stream_behavior b)</argsstring>
        <name>set_input_behavior</name>
        <param>
          <type>int</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>stream_behavior</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Sets up the behavior of an input channel. </para>        </briefdescription>
        <detaileddescription>
<para>Configures the input descriptor <emphasis>desc</emphasis> to behave as described by <bold></bold>. If <emphasis>desc</emphasis> matches STDIN_FILENO (defined in cstdlib), this mimics the set_stdin_behavior() call.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to redirection functions for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="91" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_131f7c9d4213de4de0b93c52bdc141376" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_output_behavior</definition>
        <argsstring>(int desc, stream_behavior b)</argsstring>
        <name>set_output_behavior</name>
        <param>
          <type>int</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>stream_behavior</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Sets up the behavior of an output channel. </para>        </briefdescription>
        <detaileddescription>
<para>Configures the output descriptor <emphasis>desc</emphasis> to behave as described by <bold></bold>. If <emphasis>desc</emphasis> matches STDOUT_FILENO or STDERR_FILENO (both defined in cstdlib), this mimics the set_stdout_behavior() and set_stderr_behavior() calls respectively.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to redirection functions for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="104" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="257" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_185a513b4f0d0d83de27ac7b4db0d9d45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::merge_outputs</definition>
        <argsstring>(int from, int to)</argsstring>
        <name>merge_outputs</name>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Sets up a merge of two output streams. </para>        </briefdescription>
        <detaileddescription>
<para>Configures the launcher to merge to output streams; that is, that when the child process writes to <emphasis>from</emphasis>, the data seems to have been written to <emphasis>to</emphasis>. If <emphasis>from</emphasis> matches STDOUT_FILENO and <emphasis>to</emphasis> matches STDERR_FILENO (both defined in cstdlib), this mimics the REDIR_STDERR_TO_STDOUT flag passed to the constructor.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to redirection functions for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="118" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="272" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1e01380a1665deb5ca188f674ecff9872" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uid_t</type>
        <definition>uid_t boost::process::posix_launcher::get_uid</definition>
        <argsstring>(void) const </argsstring>
        <name>get_uid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the UID that will be used to launch the new child. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the user identifier that will be used to launch the new child process. By default, this matches the user of the parent process at the moment of the creation of the launcher object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="127" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_188fe5431d98f0151c1fbf65803bb1ee5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_uid</definition>
        <argsstring>(uid_t uid)</argsstring>
        <name>set_uid</name>
        <param>
          <type>uid_t</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Sets the UID credentials used to launch the new process. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the UID credentials used to launch the new process to those given in <emphasis>uid</emphasis>.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to configuration function for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="138" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1c103d2a9e0455c98eef2d22b9fca068c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uid_t</type>
        <definition>uid_t boost::process::posix_launcher::get_euid</definition>
        <argsstring>(void) const </argsstring>
        <name>get_euid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the effective UID that will be used to launch the new child. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the effective user identifier that will be used to launch the new child process. By default, this matches the effective user of the parent process at the moment of the creation of the launcher object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="149" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="295" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1e76ea2d8b1c78f5b734cecea54a32d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_euid</definition>
        <argsstring>(uid_t euid)</argsstring>
        <name>set_euid</name>
        <param>
          <type>uid_t</type>
          <declname>euid</declname>
        </param>
        <briefdescription>
<para>Sets the effective UID credentials used to launch the new process. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the effective UID credentials used to launch the new process to those given in <emphasis>euid</emphasis>.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to configuration function for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="161" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="345" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1a96c3e381f0849520f733c8e3ec16ef6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>gid_t</type>
        <definition>gid_t boost::process::posix_launcher::get_gid</definition>
        <argsstring>(void) const </argsstring>
        <name>get_gid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the GID that will be used to launch the new child. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the group identifier that will be used to launch the new child process. By default, this matches the group of the parent process at the moment of the creation of the launcher object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="170" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_18bdec716875a6e52ba9dd07cd98c9834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_gid</definition>
        <argsstring>(gid_t gid)</argsstring>
        <name>set_gid</name>
        <param>
          <type>gid_t</type>
          <declname>gid</declname>
        </param>
        <briefdescription>
<para>Sets the GID credentials used to launch the new process. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the GID credentials used to launch the new process to those given in <emphasis>gid</emphasis>.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to configuration function for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="181" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="355" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_187c24a4e343399177df7d9d46d2792a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>gid_t</type>
        <definition>gid_t boost::process::posix_launcher::get_egid</definition>
        <argsstring>(void) const </argsstring>
        <name>get_egid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the effective GID that will be used to launch the new child. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the effective group identifier that will be used to launch the new child process. By default, this matches the effective group of the parent process at the moment of the creation of the launcher object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="192" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_16fc001c80697b11f0d81d0ae4d93d793" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_egid</definition>
        <argsstring>(gid_t egid)</argsstring>
        <name>set_egid</name>
        <param>
          <type>gid_t</type>
          <declname>egid</declname>
        </param>
        <briefdescription>
<para>Sets the effective GID credentials used to launch the new process. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the effective GID credentials used to launch the new process to those given in <emphasis>egid</emphasis>.</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to configuration function for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="204" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="365" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_1c4c4f7e7ca8468850db640da35f4c428" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; boost::process::posix_launcher::get_chroot</definition>
        <argsstring>(void) const </argsstring>
        <name>get_chroot</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the directory that the new process will be chrooted to. </para>        </briefdescription>
        <detaileddescription>
<para>Gets a path to the directory that will be used to chroot the process to during execution. If the resulting string is empty, it means that no chroot shall take place (the default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="213" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_166f8dd679205e2743a2d6030a4ed2360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> &amp;</type>
        <definition>posix_launcher &amp; boost::process::posix_launcher::set_chroot</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>set_chroot</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Sets the directory to chroot the new process to. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the directory that will be used to chroot the process to during execution. <emphasis>dir</emphasis> may be empty to indicate that the process should not be chrooted (the default).</para><para><simplesect kind="return"><para>A reference to the launcher to allow daisy-chaining calls to configuration function for simplicity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="225" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="375" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1process_1_1posix__launcher_10793b9bb9cc65d7f0c87b5761efdd6c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <declname>Command_Line</declname>
            <defname>Command_Line</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classboost_1_1process_1_1posix__child" kindref="compound">posix_child</ref></type>
        <definition>posix_child boost::process::posix_launcher::start</definition>
        <argsstring>(const Command_Line &amp;cl)</argsstring>
        <name>start</name>
        <reimplements refid="classboost_1_1process_1_1launcher_1bdde7d5fef9d4c2248f72ecadf1a119a">start</reimplements>
        <param>
          <type>const Command_Line &amp;</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
<para>Starts a new child process. </para>        </briefdescription>
        <detaileddescription>
<para>Given a command line <emphasis>cl</emphasis>, starts a new process with all the parameters configured in the launcher. The launcher can be reused afterwards to launch other different command lines.</para><para><simplesect kind="return"><para>A handle to the new child process. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="237" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="386" bodyend="407"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__launcher_10c780b9021e9f734bcb51f5db2e20edf" prot="private" static="no" mutable="no">
        <type>detail::merge_set</type>
        <definition>detail::merge_set boost::process::posix_launcher::m_merge_set</definition>
        <argsstring></argsstring>
        <name>m_merge_set</name>
        <briefdescription>
<para>List of stream merges (source descriptor - target descriptor). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="63" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__launcher_1f5b07c3d8264abbf689badc325fa734b" prot="private" static="no" mutable="no">
        <type>detail::info_map</type>
        <definition>detail::info_map boost::process::posix_launcher::m_input_info</definition>
        <argsstring></argsstring>
        <name>m_input_info</name>
        <briefdescription>
<para>List of input streams that will be redirected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="68" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__launcher_149c017e29633f7660e8c2e21f08d87e3" prot="private" static="no" mutable="no">
        <type>detail::info_map</type>
        <definition>detail::info_map boost::process::posix_launcher::m_output_info</definition>
        <argsstring></argsstring>
        <name>m_output_info</name>
        <briefdescription>
<para>List of output streams that will be redirected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="73" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1process_1_1posix__launcher_16c1869e14794ff03c7375be9c2a75547" prot="private" static="no" mutable="no">
        <type>detail::posix_setup</type>
        <definition>detail::posix_setup boost::process::posix_launcher::m_setup</definition>
        <argsstring></argsstring>
        <name>m_setup</name>
        <briefdescription>
<para>POSIX-specific properties passed to the new process. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="78" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>POSIX implementation of the Launcher concept. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classboost_1_1process_1_1posix__launcher" kindref="compound">posix_launcher</ref> class implements the Launcher concept with features only available in POSIX systems. Among these are the ability to set up more than three communication pipes and the possibility to change the security credentials of the spawned process as well as its file system root directory.</para><para>This class is built on top of the generic launcher so as to allow its trivial adoption. A program using the generic launcher may grow the need to use some POSIX-specific features. In that case, adapting the code is only a matter of redefining the appropriate object and later using the required extra features: there should be no need to modify the existing code in any other way. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="25">
        <label>boost::process::posix_launcher</label>
        <link refid="classboost_1_1process_1_1posix__launcher"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>boost::process::launcher</label>
        <link refid="classboost_1_1process_1_1launcher"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="27">
        <label>boost::process::posix_launcher</label>
        <link refid="classboost_1_1process_1_1posix__launcher"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>boost::process::launcher</label>
        <link refid="classboost_1_1process_1_1launcher"/>
      </node>
    </collaborationgraph>
    <location file="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" line="59" bodyfile="/tmp/process.016638aa/process/boost/process/posix_launcher.hpp" bodystart="57" bodyend="238"/>
    <listofallmembers>
      <member refid="classboost_1_1process_1_1posix__launcher_1c4c4f7e7ca8468850db640da35f4c428" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>get_chroot</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_187c24a4e343399177df7d9d46d2792a2" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>get_egid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1c103d2a9e0455c98eef2d22b9fca068c" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>get_euid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1a96c3e381f0849520f733c8e3ec16ef6" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>get_gid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1e01380a1665deb5ca188f674ecff9872" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>get_uid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1f5b07c3d8264abbf689badc325fa734b" prot="private" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>m_input_info</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_10c780b9021e9f734bcb51f5db2e20edf" prot="private" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>m_merge_set</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_149c017e29633f7660e8c2e21f08d87e3" prot="private" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>m_output_info</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_16c1869e14794ff03c7375be9c2a75547" prot="private" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>m_setup</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_185a513b4f0d0d83de27ac7b4db0d9d45" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>merge_outputs</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_166f8dd679205e2743a2d6030a4ed2360" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_chroot</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_16fc001c80697b11f0d81d0ae4d93d793" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_egid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1e76ea2d8b1c78f5b734cecea54a32d5e" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_euid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_18bdec716875a6e52ba9dd07cd98c9834" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_gid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_1ab7af573ae8fe5bef490ab061e6cc4aa" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_input_behavior</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_131f7c9d4213de4de0b93c52bdc141376" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_output_behavior</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_188fe5431d98f0151c1fbf65803bb1ee5" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>set_uid</name></member>
      <member refid="classboost_1_1process_1_1posix__launcher_10793b9bb9cc65d7f0c87b5761efdd6c4" prot="public" virt="non-virtual"><scope>boost::process::posix_launcher</scope><name>start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
