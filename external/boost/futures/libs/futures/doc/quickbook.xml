<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
     "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<part
    id="boost.future"
    name="Boost.Future"
    dirname="doc"
    last-revision="$Id: quickbook.xml,v 1.1 2005/11/08 16:29:09 hkaiser Exp $" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <partinfo>
    <author>
      <firstname>Thorsten</firstname>
      <surname>Schütt</surname>
    </author>

    <copyright>
      <year>2005</year>
      <holder>Thorsten Schütt</holder>
    </copyright>

    <legalnotice>
      <para>
        The document's license
      </para>
    </legalnotice>

    <partpurpose>
      Introduction to Boost.Future    </partpurpose>

    <partcategory name="category:introduction"></partcategory>

  </partinfo>

  <title>Boost.Future 0.1</title>



<section id="boost.future.intro">
<title> Introduction</title>
<para>
Futures are asynchronous function calls. The function starts
immediately in a separate thread but the construction of the future
returns immediately as well. The future is used as a handle to this
function call and can be used later on to retrieve the result of the
call.</para>
</section>
<section id="boost.future.tutorial">
<title> Tutorial</title>
<para>
In the following example we create a future which will calculate the
factorial of <code><phrase role="number">15</phrase></code>. The constructor of the future spawns a new thread
which will evaluate <code><phrase role="identifier">fac</phrase><phrase role="special">(</phrase><phrase role="number">15</phrase><phrase role="special">)</phrase></code>. During the evaluation of <code><phrase role="identifier">fac</phrase><phrase role="special">(</phrase><phrase role="number">15</phrase><phrase role="special">)</phrase></code> we
can use the main thread to do other things, like e.g. printing
<code><phrase role="identifier">fac</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase></code>. On calling the function call operator on the future, the
future blocks until the other thread finishes.</para>
<para>
</para>
<programlisting>
<literal>
<phrase role="preprocessor">#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase><phrase role="preprocessor">
#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">bind</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase><phrase role="preprocessor">
#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">futures</phrase><phrase role="special">/</phrase><phrase role="identifier">futures</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase><phrase role="keyword">

using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> std</phrase><phrase role="special">;</phrase><phrase role="keyword">
using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> boost</phrase><phrase role="special">::</phrase><phrase role="identifier">futures</phrase><phrase role="special">;</phrase><phrase role="keyword">
using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> boost</phrase><phrase role="special">;</phrase><phrase role="comment">

/*
 * fac function for testing
 */</phrase><phrase role="keyword">
int</phrase><phrase role="identifier"> fac</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="identifier"> n</phrase><phrase role="special">){</phrase><phrase role="keyword">
  if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> ==</phrase><phrase role="number"> 0</phrase><phrase role="special">)</phrase><phrase role="keyword">
    return</phrase><phrase role="number"> 0</phrase><phrase role="special">;</phrase><phrase role="keyword">
  if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> ==</phrase><phrase role="number"> 1</phrase><phrase role="special">)</phrase><phrase role="keyword">
    return</phrase><phrase role="number"> 1</phrase><phrase role="special">;</phrase><phrase role="identifier">
  sleep</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">);</phrase><phrase role="keyword">
  return</phrase><phrase role="identifier"> n</phrase><phrase role="special"> *</phrase><phrase role="identifier"> fac</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> -</phrase><phrase role="number"> 1</phrase><phrase role="special">);</phrase><phrase role="special">
}</phrase><phrase role="keyword">

int</phrase><phrase role="identifier"> main</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="identifier"> argc</phrase><phrase role="special">,</phrase><phrase role="keyword"> char</phrase><phrase role="special"> **</phrase><phrase role="identifier">argv</phrase><phrase role="special">){</phrase><phrase role="comment">
  // creates future, spawns new thread and returns immediately
</phrase><phrase role="identifier">  future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f</phrase><phrase role="special"> =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">fac</phrase><phrase role="special">,</phrase><phrase role="number"> 15</phrase><phrase role="special">);</phrase><phrase role="identifier">

  cout</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> fac</phrase><phrase role="special">(</phrase><phrase role="number">1</phrase><phrase role="special">)</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> endl</phrase><phrase role="special">;</phrase><phrase role="identifier">
  cout</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="string"> &quot;going to wait for result ...&quot;</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> endl</phrase><phrase role="special">;</phrase><phrase role="comment">
  //blocking call; waits for fac(15) to finish
</phrase><phrase role="identifier">  cout</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> f</phrase><phrase role="special">()</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> endl</phrase><phrase role="special">;</phrase><phrase role="keyword">

  return</phrase><phrase role="number"> 1</phrase><phrase role="special">;</phrase><phrase role="special">
}</phrase>
</literal>
</programlisting>
<para>
Sometimes we want to execute several different implementations of the
same function in parallel but are only interested in the result of the
fastest implementation.</para>
<para>
In this example we have a <code><phrase role="identifier">fast_fac</phrase></code> function which uses the
traditional implementation of the faculty and a <code><phrase role="identifier">disk_based_fac</phrase></code>
function which uses a large table on the hard-disk with pre-calculated
values. For large values the disk-based version may be faster, but it
is hard to predict. In this case we start two futures and simply wait
for the first to finish. To combine both futures we use the <code><phrase role="special">|</phrase></code>
operator which creates a new future which returns as soon as one of
the two given futures returns.</para>
<para>
</para>
<programlisting>
<literal>
<phrase role="preprocessor">#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">cstdio</phrase><phrase role="special">&gt;</phrase><phrase role="preprocessor">
#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">iostream</phrase><phrase role="special">&gt;</phrase><phrase role="preprocessor">
#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">bind</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase><phrase role="preprocessor">
#include</phrase><phrase role="special"> &lt;</phrase><phrase role="identifier">boost</phrase><phrase role="special">/</phrase><phrase role="identifier">futures</phrase><phrase role="special">.</phrase><phrase role="identifier">hpp</phrase><phrase role="special">&gt;</phrase><phrase role="keyword">

using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> std</phrase><phrase role="special">;</phrase><phrase role="keyword">
using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> boost</phrase><phrase role="special">::</phrase><phrase role="identifier">futures</phrase><phrase role="special">;</phrase><phrase role="keyword">
using</phrase><phrase role="keyword"> namespace</phrase><phrase role="identifier"> boost</phrase><phrase role="special">;</phrase><phrase role="comment">

/*
 * fac function for testing
 */</phrase><phrase role="keyword">
int</phrase><phrase role="identifier"> fast_fac</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="identifier"> n</phrase><phrase role="special">){</phrase><phrase role="keyword">
  if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> ==</phrase><phrase role="number"> 0</phrase><phrase role="special">)</phrase><phrase role="keyword">
    return</phrase><phrase role="number"> 0</phrase><phrase role="special">;</phrase><phrase role="keyword">
  if</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> ==</phrase><phrase role="number"> 1</phrase><phrase role="special">)</phrase><phrase role="keyword">
    return</phrase><phrase role="number"> 1</phrase><phrase role="special">;</phrase><phrase role="keyword">
  return</phrase><phrase role="identifier"> n</phrase><phrase role="special"> *</phrase><phrase role="identifier"> fac</phrase><phrase role="special">(</phrase><phrase role="identifier">n</phrase><phrase role="special"> -</phrase><phrase role="number"> 1</phrase><phrase role="special">);</phrase><phrase role="special">
}</phrase><phrase role="keyword">

int</phrase><phrase role="identifier"> disk_based_fac</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="identifier"> n</phrase><phrase role="special">){</phrase><phrase role="keyword">
  int</phrase><phrase role="identifier"> result</phrase><phrase role="special">;</phrase><phrase role="identifier">
  FILE</phrase><phrase role="special"> *</phrase><phrase role="identifier">f</phrase><phrase role="special"> =</phrase><phrase role="identifier"> fopen</phrase><phrase role="special">(</phrase><phrase role="string">&quot;fac_table.dat&quot;</phrase><phrase role="special">);</phrase><phrase role="keyword">
  int</phrase><phrase role="identifier"> error</phrase><phrase role="special"> =</phrase><phrase role="identifier"> fseek</phrase><phrase role="special">(</phrase><phrase role="identifier">f</phrase><phrase role="special">,</phrase><phrase role="identifier"> n</phrase><phrase role="special"> *</phrase><phrase role="keyword"> sizeof</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">),</phrase><phrase role="identifier"> SEEK_SET</phrase><phrase role="special">);</phrase><phrase role="identifier">
  error</phrase><phrase role="special"> =</phrase><phrase role="identifier"> fread</phrase><phrase role="special">(&amp;</phrase><phrase role="identifier">result</phrase><phrase role="special">,</phrase><phrase role="keyword"> sizeof</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="special">),</phrase><phrase role="number"> 1</phrase><phrase role="special">,</phrase><phrase role="identifier"> f</phrase><phrase role="special">);</phrase><phrase role="identifier">
  error</phrase><phrase role="special"> =</phrase><phrase role="identifier"> fclose</phrase><phrase role="special">(</phrase><phrase role="identifier">f</phrase><phrase role="special">);</phrase><phrase role="keyword">
  return</phrase><phrase role="identifier"> result</phrase><phrase role="special">;</phrase><phrase role="special">
}</phrase><phrase role="keyword">

int</phrase><phrase role="identifier"> main</phrase><phrase role="special">(</phrase><phrase role="keyword">int</phrase><phrase role="identifier"> argc</phrase><phrase role="special">,</phrase><phrase role="keyword"> char</phrase><phrase role="special"> **</phrase><phrase role="identifier">argv</phrase><phrase role="special">){</phrase><phrase role="comment">
  // creates future, spawns new thread and returns immediately
</phrase><phrase role="identifier">  future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f_fast</phrase><phrase role="special">                    =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">fast_fac</phrase><phrase role="special">,</phrase><phrase role="number"> 15</phrase><phrase role="special">);</phrase><phrase role="identifier">
  future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f_slow</phrase><phrase role="special">                    =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">slow_fac</phrase><phrase role="special">,</phrase><phrase role="number"> 15</phrase><phrase role="special">);</phrase><phrase role="identifier">
  composite_future</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">simple_or_op</phrase><phrase role="special">,</phrase><phrase role="keyword"> int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f</phrase><phrase role="special"> =</phrase><phrase role="identifier"> f_fast</phrase><phrase role="special"> |</phrase><phrase role="identifier"> f_slow</phrase><phrase role="special">;</phrase><phrase role="identifier">

  cout</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> f</phrase><phrase role="special">()</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> endl</phrase><phrase role="special">;</phrase><phrase role="keyword">

  return</phrase><phrase role="number"> 1</phrase><phrase role="special">;</phrase><phrase role="special">
}</phrase>
</literal>
</programlisting>
<para>
For seamless integration with existing code futures provide a second
syntax for joining:</para>
<para>
</para>
<programlisting>
<literal>
<phrase role="identifier">future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f</phrase><phrase role="special"> =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">fac</phrase><phrase role="special">,</phrase><phrase role="number"> 15</phrase><phrase role="special">);</phrase><phrase role="identifier">

cout</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> f</phrase><phrase role="special"> &lt;&lt;</phrase><phrase role="identifier"> endl</phrase><phrase role="special">;</phrase>
</literal>
</programlisting>
<para>
For <code><phrase role="identifier">future</phrase><phrase role="special">&lt;</phrase><phrase role="identifier">T</phrase><phrase role="special">&gt;</phrase></code> the cast operator <code><phrase role="keyword">operator</phrase><phrase role="identifier"> T</phrase><phrase role="special">()</phrase></code> is overloaded to work
like the function call operator. It is also possible to call <code><phrase role="special">.</phrase><phrase role="identifier">get</phrase><phrase role="special">()</phrase></code>
to get the result.</para>
<para>
futures currently support two method to combine futures into more complex
futures: <code><phrase role="special">|</phrase></code> and <code><phrase role="special">&amp;&amp;</phrase></code>. The first operator was already introduced in the last
example. It is called simple_or because the result type of the two futures
must be the same. The more powerfull version which supports arbitrary result types
is not yet implemented. The <code><phrase role="special">&amp;&amp;</phrase></code> operator can be used if the result of both
futures is needed. The result type of the combined future is a tuple of the
resultes of the individual futures.</para>
<para>
</para>
<programlisting>
<literal>
<phrase role="identifier">future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f1</phrase><phrase role="special"> =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">fac</phrase><phrase role="special">,</phrase><phrase role="number"> 15</phrase><phrase role="special">);</phrase><phrase role="identifier">
future</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> f2</phrase><phrase role="special"> =</phrase><phrase role="identifier"> bind</phrase><phrase role="special">(</phrase><phrase role="identifier">fac</phrase><phrase role="special">,</phrase><phrase role="number"> 16</phrase><phrase role="special">);</phrase><phrase role="identifier">

tuple</phrase><phrase role="special">&lt;</phrase><phrase role="keyword">int</phrase><phrase role="special">,</phrase><phrase role="keyword"> int</phrase><phrase role="special">&gt;</phrase><phrase role="identifier"> fac_15_16</phrase><phrase role="special"> =</phrase><phrase role="identifier"> f1</phrase><phrase role="special"> &amp;&amp;</phrase><phrase role="identifier"> f2</phrase><phrase role="special">;</phrase>
</literal>
</programlisting>
</section>
<section id="boost.future.scenarios">
<title> Scenarios</title>
<itemizedlist>
<listitem>
Remote Procedure Calls
</listitem><listitem>
If there are two implementations with non-predictable and highly different run time behavior.
</listitem><listitem>
Blocking IO calls.
</listitem><listitem>
parallel game-tree search
</listitem>
</itemizedlist></section>
<section id="boost.future.openissues">
<title> Open Issues</title>
<itemizedlist>
<listitem>
What happens to futures which will never be joined?
</listitem><listitem>
How to implement <code><phrase role="special">||</phrase></code>?
</listitem>
</itemizedlist></section>
</part>

