#!/bin/sh

# run a saga test, and prit some infdo to stdout.  If the test succeeds (returns
# 0), the file $0.ok is created, to inform make.  If the test fails, the file
# $0.nok is created.
#
# We assume to get called with the correct env, so the saga test application to
# be run should find all libraries etc.

cache=no
if test "x$1" = "x-c"; then
  shift
  cache=yes
fi

if test "x$1" = "x-e"; then
  shift
  if test "x$1" != "x"; then
    env=$1
    shift
  fi
fi

if test "x$1" = "x"; then
  echo ""
  echo "   `basename $0` runs a given SAGA application as test, "
  echo "   and reports the result. "
  echo ""
  echo "   This script sets the environment so that the test can load SAGA successfully."
  echo "   It is used by SAGA unit tests, and should not be run manually."
  echo ""
  echo "   Usage: `basename $0` [-c] [-e env] <saga-test> [args] "
  echo ""
  echo "     -c      cache results: if the test was successful "
  echo "             before, don't run it again, but just report."
  echo ""
  echo "     -e env  environment to be passed to the test, "
  echo "             via /bin/env"
  echo ""
  exit -1
fi


base=`basename $1`
file_ok="./$base.ok"
file_nok="./$base.nok"
file_out="./$base.out"
file_err="./$base.err"


printf "      running test %-30s \t : " "'$base'"

if test "$cache" = "yes" -a -e "$file_ok" ; then

    # no need to run the test - just report cached success
    echo "SUCCESS (cached)"

else

  # need to run the test really - either we don't wan't cached results, or the
  # test failed previously

  # clean old ok/nok files.
  rm -f $file_ok $file_nok
  
# env $env $* 1>$file_out 2>$file_err
  env $env $* 1>$file_out 2>&1
  
  if test $? -eq 0; then
    touch $file_ok
    echo "SUCCESS"
  else
    touch $file_nok
    echo "FAILURE"
    echo "--------------------------------------------------------------------"
    echo "STDIO:"
    echo "-------"
    cat $file_out
    echo "--------------------------------------------------------------------"
#   echo "STDERR:"
#   echo "-------"
#   cat $file_err
#   echo "--------------------------------------------------------------------"
  fi
fi

# always return success
exit 0

