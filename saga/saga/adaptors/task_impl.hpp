//  Copyright (c) 2005-2009 Hartmut Kaiser
//  Copyright (c) 2005-2006 Stephan Hirmer (shirmer@cct.lsu.edu)
// 
//  Distributed under the Boost Software License, Version 1.0. (See accompanying 
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#if !defined(BOOST_PP_IS_ITERATING)

#if !defined(SAGA_ADAPTOR_TASK_IMPL_IMPLEMENTATION_HPP)
#define SAGA_ADAPTOR_TASK_IMPL_IMPLEMENTATION_HPP

#include <saga/impl/config.hpp>

#include <boost/preprocessor/iterate.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_binary_params.hpp>

#define BOOST_PP_ITERATION_PARAMS_1                                           \
    (3, (1, SAGA_ARGUMENT_LIMIT,                                              \
    "saga/saga/adaptors/task_impl.hpp"))                                      \
    /**/

#include BOOST_PP_ITERATE()

#endif // SAGA_ADAPTOR_TASK_IMPL_IMPLEMENTATION_HPP

///////////////////////////////////////////////////////////////////////////////
//
//  Preprocessor vertical repetition code
//
///////////////////////////////////////////////////////////////////////////////
#else // defined(BOOST_PP_IS_ITERATING)

#define P BOOST_PP_ITERATION()

#define GET_TEMP_ARG(z, M, _) BOOST_PP_COMMA_IF(M) FuncArg ## M, Arg ## M

    /**
      * template'd helper function, which creates a appropriate
      * saga::impl::task object
      */
    template<
        typename Cpi, typename Base, typename RetVal, 
        BOOST_PP_ENUM_PARAMS (P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS (P, typename Arg)
    >
    inline saga::impl::task<
        Cpi, Base, RetVal, BOOST_PP_REPEAT(P, GET_TEMP_ARG, _)>*
    task::create_task(
        char const *func_name, TR1::shared_ptr<Cpi> cpi, impl::proxy* prxy, 
        void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg)),
        BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
        bool (Base::*prep)(RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), 
            saga::uuid))
    {
        return new saga::impl::task<
            Cpi, Base, RetVal, BOOST_PP_REPEAT(P, GET_TEMP_ARG, _)>(
                func_name, cpi, prxy, sync, BOOST_PP_ENUM_PARAMS(P, arg), prep);
    }

    /**
      * template'd helper function, which creates a appropriate
      * saga::impl::task object
      *
      * The function to execute takes as a further parameter,
      * more precisely, a uuid of the task, which will be executed in the adaptor
      *
      * generated by the preprocessor with the help of macros. The number of
      * parameters differs.
      */
    template<typename Cpi, typename Base, typename RetVal,
        BOOST_PP_ENUM_PARAMS(P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS(P, typename Arg)
    >
    inline saga::impl::wrapper_task <
        Cpi, Base, RetVal, BOOST_PP_REPEAT(P, GET_TEMP_ARG, _)>*
    task::create_task(
        char const *func_name, TR1::shared_ptr<Cpi> cpi, impl::proxy* prxy, 
        void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid),
        BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
        bool (Base::*prep)(
            RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid))
    {
        return new saga::impl::wrapper_task<
            Cpi, Base, RetVal, BOOST_PP_REPEAT(P, GET_TEMP_ARG, _)>(
                func_name, cpi, prxy, sync, BOOST_PP_ENUM_PARAMS(P, arg), prep);
    }

#undef GET_TEMP_ARG

    /**
      * overloaded template'd constructor
      *
      * generates with the help of preprocessor meta-programming.
      * Same as the simple constructor, but the number of function parameters
      * for f and prep_func differ.
      * calls member function create_task and puts the returned task
      * into the saga::task class, which is part of the facade.
      *
      */ 
    template<
        typename Cpi, typename Base, typename RetVal,
        BOOST_PP_ENUM_PARAMS (P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS (P, typename Arg)
    >
    inline task::task (
            char const *func_name, TR1::shared_ptr<Cpi> cpi, impl::proxy* prxy, 
            void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS (P, FuncArg)),
            BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
            bool (Base::*prep)(
                RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid))
      : base_type (
          create_task(func_name, cpi, prxy, sync, BOOST_PP_ENUM_PARAMS(P, arg), prep))
    {
    }

    template<
        typename Cpi, typename Base, typename RetVal,
        BOOST_PP_ENUM_PARAMS (P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS (P, typename Arg)
    >
    inline task::task (
            char const *func_name, TR1::shared_ptr<Cpi> cpi, 
            void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS (P, FuncArg)),
            BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
            bool (Base::*prep)(
                RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid))
      : base_type (create_task(func_name, cpi, cpi->get_proxy(), sync, 
            BOOST_PP_ENUM_PARAMS(P, arg), prep))
    {
    }

    /**
      * overloaded template'd constructor
      *
      * generates with the help of preprocessor meta-programming.
      * Same as the simple constructor, but the number of function parameters
      * for f and prep_func differ.
      * calls member function create_task and puts the returned task
      * into the saga::task class, which is part of the facade.
      * Differs from the other constructor, because the func takes a 
      * further parameter, a task uuid.
      *
      */ 
    template<
        typename Cpi, typename Base, typename RetVal,
        BOOST_PP_ENUM_PARAMS (P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS (P, typename Arg)
    >
    inline task::task (
            char const *func_name, TR1::shared_ptr<Cpi> cpi, impl::proxy* prxy, 
            void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid),
            BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
            bool (Base::*prep)(
                RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid))
      : base_type(
          create_task(func_name, cpi, prxy, sync, BOOST_PP_ENUM_PARAMS(P, arg), prep)) 
    {
    }

    template<
        typename Cpi, typename Base, typename RetVal,
        BOOST_PP_ENUM_PARAMS (P, typename FuncArg),
        BOOST_PP_ENUM_PARAMS (P, typename Arg)
    >
    inline task::task (
            char const *func_name, TR1::shared_ptr<Cpi> cpi, 
            void (Base::*sync)(RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid),
            BOOST_PP_ENUM_BINARY_PARAMS (P, Arg, const& arg),
            bool (Base::*prep)(
                RetVal&, BOOST_PP_ENUM_PARAMS(P, FuncArg), saga::uuid))
      : base_type(create_task(func_name, cpi, cpi->get_proxy(), sync, 
            BOOST_PP_ENUM_PARAMS(P, arg), prep)) 
    {
    }

#undef P

#endif // defined(BOOST_PP_IS_ITERATING)
